package com.ormtest.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import greendao.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SName = new Property(1, String.class, "sName", false, "S_NAME");
        public final static Property SAge = new Property(2, String.class, "sAge", false, "S_AGE");
        public final static Property SSex = new Property(3, String.class, "sSex", false, "S_SEX");
        public final static Property SClass = new Property(4, String.class, "sClass", false, "S_CLASS");
    };


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"S_NAME\" TEXT NOT NULL ," + // 1: sName
                "\"S_AGE\" TEXT," + // 2: sAge
                "\"S_SEX\" TEXT," + // 3: sSex
                "\"S_CLASS\" TEXT);"); // 4: sClass
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSName());
 
        String sAge = entity.getSAge();
        if (sAge != null) {
            stmt.bindString(3, sAge);
        }
 
        String sSex = entity.getSSex();
        if (sSex != null) {
            stmt.bindString(4, sSex);
        }
 
        String sClass = entity.getSClass();
        if (sClass != null) {
            stmt.bindString(5, sClass);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSName());
 
        String sAge = entity.getSAge();
        if (sAge != null) {
            stmt.bindString(3, sAge);
        }
 
        String sSex = entity.getSSex();
        if (sSex != null) {
            stmt.bindString(4, sSex);
        }
 
        String sClass = entity.getSClass();
        if (sClass != null) {
            stmt.bindString(5, sClass);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // sName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sAge
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sSex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sClass
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSName(cursor.getString(offset + 1));
        entity.setSAge(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSClass(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
